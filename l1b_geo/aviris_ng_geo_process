#! /usr/bin/env python
#
# This runs the L1B Geo process.
import geocal
import emit
from loguru import logger
import os
import sys

version = "1.0.0"
usage = """Usage:
  aviris_ng_geo_process [options] <prod_dir> <l1_osp_dir> <orbit_file> <line_time_file> <rad_file>
  aviris_ng_geo_process -h | --help
  aviris_ng_geo_process -v | --version

This runs the aviris_ng_geo process. 

This takes the production directory, which we also use as a scratch area.
For performance, this should be a local directory - we do memory mapping of
files and this tends to work much faster with local drives.

This takes the L1 operational support directory (e.g. 
/beegfs/store/shared/emit-test-data/latest/l1_osp_dir), and the orbit and line
time netCDF files generated by aviris_ng_l1a_orbit_pge.

A log file will be written to the output directory - aviris_ng_geo.log. By
default this is also written to the screen, but you can turn this off
using the --log-file-only option.

Options:
  -h --help         
       Print this message

  --debug
       Turn debugging information on
       
  --log-file-only=f
       Write logs only to the log file, not also to the screen.

  --no-color
       Don't colorize output. Only applies to the screen, we never put
       color into log files.

  --number-cpu=d
       Number of CPUs to use when processing. 
       [default: 10]

  --quiet
       Don't print any messages, just return an overall status code.

  --verbose
       Give more verbose messages. Synonym for debug.

  -v --version      
       Print program version
"""

args = geocal.docopt_simple(usage, version=version)

# Read in additional configuration parameters
l1_osp_dir = emit.L1OspDir(args.l1_osp_dir)

# Set up logging.
os.makedirs(args.prod_dir, exist_ok=True)
logger.remove()
if args.verbose:
    logger.add(sys.stderr, level="DEBUG")
else:
    logger.add(sys.stderr, level="INFO")
logger.add(args.prod_dir + "/aviris_ng_geo.log", level="DEBUG")

try:
    with logger.catch(reraise=True):
        logger.info(
            f"Starting {l1_osp_dir.pge_name} version {l1_osp_dir.pge_version} processing"
        )
        orb_fname = os.path.abspath(args.orbit_file)
        tt_fname = os.path.abspath(args.line_time_file)
        rad_fname = os.path.abspath(args.rad_file)
        curdir = os.getcwd()
        try:
            os.chdir(args.prod_dir)
            t = emit.AvirisNgGeoGenerate(l1_osp_dir, orb_fname, tt_fname, rad_fname)
            t.run()
        finally:
            os.chdir(curdir)
        logger.info("Done with aviris_ng_geo processing")
except Exception:
    logger.fatal("aviris_ng_geo processing failed")
    raise
except:
    logger.fatal("aviris_ng_geo processing failed")
    raise
