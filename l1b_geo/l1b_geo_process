#! /usr/bin/env python
#
# This runs the L1B Geo process.
import geocal
import emit
from loguru import logger
import os
import sys
import json

version = "1.0.0"
usage = """Usage:
  l1b_geo_process [options] <prod_dir> <l1_osp_dir> <l1a_att> (<line_time> <l1b_rad>)...
  l1b_geo_process [options] <prod_dir> <l1_osp_dir> <run_config>
  l1b_geo_process -h | --help
  l1b_geo_process -v | --version

This runs the l1b_geo process. 

This takes the production directory, which we also use as a scratch area.
For performance, this should be a local directory - we do memory mapping of
files and this tends to work much faster with local drives.

This takes the L1 operational support directory (e.g. 
/beegfs/store/shared/emit-test-data/latest/l1_osp_dir), the L1A 
ephemeris/attitude file, and a list of line time/radiance data file
pairs. The line time and radiance should be paired together, so for
example give scene 1 for both files, scene 2, etc.

Right now we extract the orbit and scene information from the file
names. We might want to actually put this into metadata for the file,
but for now we just extract this.

A log file will be written to the output directory - l1b_geo.log. By
default this is also written to the screen, but you can turn this off
using the --log-file-only option.

Options:
  -h --help         
       Print this message

  --debug
       Turn debugging information on
       
  --log-file-only=f
       Write logs only to the log file, not also to the screen.

  --no-color
       Don't colorize output. Only applies to the screen, we never put
       color into log files.

  --number-cpu=d
       Number of CPUs to use when processing. 
       [default: 10]

  --quiet
       Don't print any messages, just return an overall status code.

  --verbose
       Give more verbose messages. Synonym for debug.

  -v --version      
       Print program version
"""

args = geocal.docopt_simple(usage, version=version)

# Set up logging.
os.makedirs(args.prod_dir, exist_ok=True)
logger.remove()
if args.verbose:
    logger.add(sys.stderr, level="DEBUG")
else:
    logger.add(sys.stderr, level="INFO")
logger.add(args.prod_dir + "/l1b_geo.log", level="DEBUG")

# Read in additional configuration parameters
l1_osp_dir = emit.L1OspDir(args.l1_osp_dir)

# Run actual process
if args.l1a_att:
    l1a_att = os.path.abspath(args.l1a_att)
    line_time = [os.path.abspath(f) for f in args.line_time]
    l1b_rad = [os.path.abspath(f) for f in args.l1b_rad]
else:
    curdir = os.getcwd()
    try:
        f = json.load(open(args.run_config))
        os.chdir(os.path.dirname(args.run_config))
        l1a_att = os.path.abspath(os.path.expandvars(f["attitude_ephemeris_file"]))
        line_time = [
            os.path.abspath(os.path.expandvars(t["timestamps_file"]))
            for t in f["timestamp_radiance_pairs"]
        ]
        l1b_rad = [
            os.path.abspath(os.path.expandvars(t["radiance_file"]))
            for t in f["timestamp_radiance_pairs"]
        ]
    finally:
        os.chdir(curdir)
logger.info(f"l1_att file: {l1a_att}")
logger.info(f"line_time files {line_time}")
logger.info(f"l1b_rad files {l1b_rad}")
try:
    with logger.catch(reraise=True):
        logger.info(
            f"Starting {l1_osp_dir.pge_name} version {l1_osp_dir.pge_version} processing"
        )
        curdir = os.getcwd()
        try:
            os.chdir(args.prod_dir)
            t = emit.L1bGeoGenerate(l1_osp_dir, l1a_att, line_time, l1b_rad)
            t.run()
        finally:
            os.chdir(curdir)
        logger.info("Done with l1b_geo processing")
except Exception:
    logger.fatal("L1b_geo processing failed")
    raise
except:
    logger.fatal("L1b_geo processing failed")
    raise
