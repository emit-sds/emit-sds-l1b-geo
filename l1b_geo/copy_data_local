#! /usr/bin/env python
#
# Simple script to copy data from a input.json file to a local directory

import geocal
import json
import os
import subprocess

version = "1.0.0"
usage='''Usage:
  copy_data_local [options] <input_json> <local_dir> <new_json>
  copy_data_local -h | --help
  copy_data_local -v | --version

This copies data from the input_json file to the local_dir, and creates
a new json file with the local_dir location.

Options:
  -h --help         
       Print this message

  --ssh
       Use ssh to get data, e.g., we are copying to a machine that isn't
       on the same network as ngis-hpc

  -v --version      
       Print program version
'''

args = geocal.docopt_simple(usage, version=version)
local_dir = os.path.abspath(args.local_dir)
subprocess.run(["mkdir", "-p", local_dir], check=True)
f = json.load(open(args.input_json))
flist = [os.path.abspath(os.path.expandvars(f["attitude_ephemeris_file"]))]
flist.extend(os.path.abspath(os.path.expandvars(t['timestamps_file'])) for t in f["timestamp_radiance_pairs"])
flist.extend(os.path.abspath(os.path.expandvars(t['radiance_file'])) for t in f["timestamp_radiance_pairs"])
flist.extend(os.path.splitext(os.path.abspath(os.path.expandvars(t['radiance_file'])))[0]+".hdr" for t in f["timestamp_radiance_pairs"])
if(args.ssh):
    flist = [f"ngis-hpc:{f}" for f in flist]
cmd = ["rsync", "-avz", "--progress", "--inplace"]
if(args.ssh):
    cmd.extend(["--rsh", "ssh"])
cmd.extend(flist)
cmd.append(local_dir + "/")
subprocess.run(cmd, check=True)
new_input = {}
new_input["attitude_ephemeris_file"] = f"{local_dir}/" + os.path.basename(f["attitude_ephemeris_file"])
new_input["timestamp_radiance_pairs"] = []
for i in range(len(f["timestamp_radiance_pairs"])):
    new_input["timestamp_radiance_pairs"].append({
        'timestamps_file' : f"{local_dir}/" + os.path.basename(f["timestamp_radiance_pairs"][i]["timestamps_file"]),
        'radiance_file' : f"{local_dir}/" + os.path.basename(f["timestamp_radiance_pairs"][i]["radiance_file"]),
        })
with open(args.new_json, "w") as fh:
    json.dump(new_input, fh, indent=4)
    
