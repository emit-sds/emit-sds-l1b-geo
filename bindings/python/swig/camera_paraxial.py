# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _camera_paraxial

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _camera_paraxial.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _camera_paraxial.delete_SwigPyIterator

    def value(self):
        return _camera_paraxial.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _camera_paraxial.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _camera_paraxial.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _camera_paraxial.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _camera_paraxial.SwigPyIterator_equal(self, x)

    def copy(self):
        return _camera_paraxial.SwigPyIterator_copy(self)

    def next(self):
        return _camera_paraxial.SwigPyIterator_next(self)

    def __next__(self):
        return _camera_paraxial.SwigPyIterator___next__(self)

    def previous(self):
        return _camera_paraxial.SwigPyIterator_previous(self)

    def advance(self, n):
        return _camera_paraxial.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _camera_paraxial.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _camera_paraxial.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _camera_paraxial.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _camera_paraxial.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _camera_paraxial.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _camera_paraxial.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _camera_paraxial:
_camera_paraxial.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _camera_paraxial.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.quaternion_camera
import geocal_swig.observer
import geocal_swig.camera
import geocal_swig.with_parameter
class ParaxialTransform(geocal_swig.generic_object.GenericObject):
    r"""

    Pariaxial Transform to go with CameraParaxial.

    C++ includes: camera_paraxial.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def paraxial_to_real(self, *args):
        r"""

        virtual void Emit::ParaxialTransform::paraxial_to_real(const GeoCal::AutoDerivative< double > &Paraxial_x, const
        GeoCal::AutoDerivative< double > &Paraxial_y, GeoCal::AutoDerivative<
        double > &Real_x, GeoCal::AutoDerivative< double > &Real_y) const =0

        """
        return _camera_paraxial.ParaxialTransform_paraxial_to_real(self, *args)

    def real_to_paraxial(self, *args):
        r"""

        virtual void Emit::ParaxialTransform::real_to_paraxial(const GeoCal::AutoDerivative< double > &Real_x, const
        GeoCal::AutoDerivative< double > &Real_y, GeoCal::AutoDerivative<
        double > &Paraxial_x, GeoCal::AutoDerivative< double > &Paraxial_y)
        const =0

        """
        return _camera_paraxial.ParaxialTransform_real_to_paraxial(self, *args)

    def __str__(self):
        return _camera_paraxial.ParaxialTransform___str__(self)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _camera_paraxial.delete_ParaxialTransform

# Register ParaxialTransform in _camera_paraxial:
_camera_paraxial.ParaxialTransform_swigregister(ParaxialTransform)
class IdentityParaxialTransform(ParaxialTransform):
    r"""

    Identity ParaxialTransform, e.g., just a linear camera model.

    C++ includes: camera_paraxial.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""

        Emit::IdentityParaxialTransform::IdentityParaxialTransform()

        """
        _camera_paraxial.IdentityParaxialTransform_swiginit(self, _camera_paraxial.new_IdentityParaxialTransform())

    def paraxial_to_real(self, *args):
        r"""

        virtual void Emit::IdentityParaxialTransform::paraxial_to_real(const GeoCal::AutoDerivative< double > &Paraxial_x, const
        GeoCal::AutoDerivative< double > &Paraxial_y, GeoCal::AutoDerivative<
        double > &Real_x, GeoCal::AutoDerivative< double > &Real_y) const

        """
        return _camera_paraxial.IdentityParaxialTransform_paraxial_to_real(self, *args)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _camera_paraxial.delete_IdentityParaxialTransform

# Register IdentityParaxialTransform in _camera_paraxial:
_camera_paraxial.IdentityParaxialTransform_swigregister(IdentityParaxialTransform)
class CaptureParaxialTransform(ParaxialTransform):
    r"""

    This is a specialized ParaxialTransform that just captures the data it
    is called for.

    This is useful for collecting information to fit another
    ParaxialTransform. You can call this once going forward with the real
    ImageCoordinate and once going backwards with the real
    GroundCoordinate. This then gives you the mapping between x_predict,
    y_predict and x_actual, y_actual.

    Sample of collecting the data for a IpiImageGroundConnection in
    python:

    cam.paraxial_transform.clear() for smp in range(igm.shape[1]): gc =
    igc.ground_coordinate_approx_height(ImageCoordinate(ln, smp),
    igm[ln,smp].height_reference_surface)
    igc.collinearity_residual(igm[ln,smp],ImageCoordinate(ln,smp))
    predict_x = np.array(cam.paraxial_transform.predict_x) predict_y =
    np.array(cam.paraxial_transform.predict_y) real_x =
    np.array(cam.paraxial_transform.real_x) real_y =
    np.array(cam.paraxial_transform.real_y)

    C++ includes: camera_paraxial.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""

        Emit::CaptureParaxialTransform::CaptureParaxialTransform()

        """
        _camera_paraxial.CaptureParaxialTransform_swiginit(self, _camera_paraxial.new_CaptureParaxialTransform())

    def paraxial_to_real(self, *args):
        r"""

        virtual void Emit::CaptureParaxialTransform::paraxial_to_real(const GeoCal::AutoDerivative< double > &Paraxial_x, const
        GeoCal::AutoDerivative< double > &Paraxial_y, GeoCal::AutoDerivative<
        double > &Real_x, GeoCal::AutoDerivative< double > &Real_y) const

        """
        return _camera_paraxial.CaptureParaxialTransform_paraxial_to_real(self, *args)

    def clear(self):
        r"""

        void Emit::CaptureParaxialTransform::clear()

        """
        return _camera_paraxial.CaptureParaxialTransform_clear(self)

    def _v_predict_x(self):
        r"""

        const std::vector<double>& Emit::CaptureParaxialTransform::predict_x() const

        """
        return _camera_paraxial.CaptureParaxialTransform__v_predict_x(self)

    @property
    def predict_x(self):
        return self._v_predict_x()


    def _v_predict_y(self):
        r"""

        const std::vector<double>& Emit::CaptureParaxialTransform::predict_y() const

        """
        return _camera_paraxial.CaptureParaxialTransform__v_predict_y(self)

    @property
    def predict_y(self):
        return self._v_predict_y()


    def _v_real_x(self):
        r"""

        const std::vector<double>& Emit::CaptureParaxialTransform::real_x() const

        """
        return _camera_paraxial.CaptureParaxialTransform__v_real_x(self)

    @property
    def real_x(self):
        return self._v_real_x()


    def _v_real_y(self):
        r"""

        const std::vector<double>& Emit::CaptureParaxialTransform::real_y() const

        """
        return _camera_paraxial.CaptureParaxialTransform__v_real_y(self)

    @property
    def real_y(self):
        return self._v_real_y()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _camera_paraxial.delete_CaptureParaxialTransform

# Register CaptureParaxialTransform in _camera_paraxial:
_camera_paraxial.CaptureParaxialTransform_swigregister(CaptureParaxialTransform)
class CameraParaxial(geocal_swig.quaternion_camera.QuaternionCamera):
    r"""

    One model for a camera is to capture the nonlinearities by a
    ParaxialTransform.

    This maps between the focal plane x, y predicted by a linear camera,
    and the real x,y for the actual camera.

    Note that this is actually a fairly general model, we should probably
    move this into GeoCal. But for now keep separate so we don't need to
    depend on an updated version of geocal.

    C++ includes: camera_paraxial.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Emit::CameraParaxial::CameraParaxial(boost::math::quaternion< double > Frame_to_sc_q, double Number_line,
        double Number_sample, double Line_pitch, double Sample_pitch, double
        Focal_length, const GeoCal::FrameCoordinate &Principal_point, const
        boost::shared_ptr< ParaxialTransform > &P_transform, FrameConvention
        Frame_convention=GeoCal::QuaternionCamera::LINE_IS_X, FrameDirection
        Line_direction=GeoCal::QuaternionCamera::INCREASE_IS_POSITIVE,
        FrameDirection
        Sample_direction=GeoCal::QuaternionCamera::INCREASE_IS_POSITIVE)

        """
        _camera_paraxial.CameraParaxial_swiginit(self, _camera_paraxial.new_CameraParaxial(*args))

    def _v_paraxial_transform(self, *args):
        r"""

        void Emit::CameraParaxial::paraxial_transform(const boost::shared_ptr< ParaxialTransform > &v)

        """
        return _camera_paraxial.CameraParaxial__v_paraxial_transform(self, *args)

    @property
    def paraxial_transform(self):
        return self._v_paraxial_transform()

    @paraxial_transform.setter
    def paraxial_transform(self, value):
      self._v_paraxial_transform(value)


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _camera_paraxial.delete_CameraParaxial

# Register CameraParaxial in _camera_paraxial:
_camera_paraxial.CameraParaxial_swigregister(CameraParaxial)

__all__ = ["ParaxialTransform","IdentityParaxialTransform","CaptureParaxialTransform","CameraParaxial"]


