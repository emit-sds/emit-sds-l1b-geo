# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_camera_paraxial')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_camera_paraxial')
    _camera_paraxial = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_camera_paraxial', [dirname(__file__)])
        except ImportError:
            import _camera_paraxial
            return _camera_paraxial
        try:
            _mod = imp.load_module('_camera_paraxial', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _camera_paraxial = swig_import_helper()
    del swig_import_helper
else:
    import _camera_paraxial
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _camera_paraxial.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _camera_paraxial.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _camera_paraxial.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _camera_paraxial.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _camera_paraxial.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _camera_paraxial.SwigPyIterator_equal(self, x)

    def copy(self):
        return _camera_paraxial.SwigPyIterator_copy(self)

    def next(self):
        return _camera_paraxial.SwigPyIterator_next(self)

    def __next__(self):
        return _camera_paraxial.SwigPyIterator___next__(self)

    def previous(self):
        return _camera_paraxial.SwigPyIterator_previous(self)

    def advance(self, n):
        return _camera_paraxial.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _camera_paraxial.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _camera_paraxial.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _camera_paraxial.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _camera_paraxial.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _camera_paraxial.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _camera_paraxial.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _camera_paraxial.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _camera_paraxial.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.quaternion_camera
import geocal_swig.observer
import geocal_swig.camera
import geocal_swig.with_parameter
class ParaxialTransform(geocal_swig.generic_object.GenericObject):
    """

    Pariaxial Transform to go with CameraParaxial.

    C++ includes: camera_paraxial.h 
    """

    __swig_setmethods__ = {}
    for _s in [geocal_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParaxialTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [geocal_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParaxialTransform, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def paraxial_to_real(self, *args):
        """

        virtual void Emit::ParaxialTransform::paraxial_to_real(double Paraxial_x, double Paraxial_y, double &Real_x, double &Real_y)
        const =0

        """
        return _camera_paraxial.ParaxialTransform_paraxial_to_real(self, *args)


    def real_to_paraxial(self, *args):
        """

        virtual void Emit::ParaxialTransform::real_to_paraxial(double Real_x, double Real_y, double &Paraxial_x, double &Paraxial_y)
        const =0

        """
        return _camera_paraxial.ParaxialTransform_real_to_paraxial(self, *args)


    def __str__(self):
        return _camera_paraxial.ParaxialTransform___str__(self)

    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _camera_paraxial.delete_ParaxialTransform
    __del__ = lambda self: None
ParaxialTransform_swigregister = _camera_paraxial.ParaxialTransform_swigregister
ParaxialTransform_swigregister(ParaxialTransform)

class IdentityParaxialTransform(ParaxialTransform):
    """

    Identity ParaxialTransform, e.g., just a linear camera model.

    C++ includes: camera_paraxial.h 
    """

    __swig_setmethods__ = {}
    for _s in [ParaxialTransform]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdentityParaxialTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ParaxialTransform]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdentityParaxialTransform, name)
    __repr__ = _swig_repr

    def __init__(self):
        """

        Emit::IdentityParaxialTransform::IdentityParaxialTransform()

        """
        this = _camera_paraxial.new_IdentityParaxialTransform()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def paraxial_to_real(self, *args):
        """

        virtual void Emit::IdentityParaxialTransform::paraxial_to_real(double Paraxial_x, double Paraxial_y, double &Real_x, double &Real_y)
        const

        """
        return _camera_paraxial.IdentityParaxialTransform_paraxial_to_real(self, *args)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _camera_paraxial.delete_IdentityParaxialTransform
    __del__ = lambda self: None
IdentityParaxialTransform_swigregister = _camera_paraxial.IdentityParaxialTransform_swigregister
IdentityParaxialTransform_swigregister(IdentityParaxialTransform)

class CaptureParaxialTransform(ParaxialTransform):
    """

    This is a specialized ParaxialTransform that just captures the data it
    is called for.

    This is useful for collecting information to fit another
    ParaxialTransform. You can call this once going forward with the real
    ImageCoordinate and once going backwards with the real
    GroundCoordinate. This then gives you the mapping between x_predict,
    y_predict and x_actual, y_actual.

    C++ includes: camera_paraxial.h 
    """

    __swig_setmethods__ = {}
    for _s in [ParaxialTransform]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaptureParaxialTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ParaxialTransform]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CaptureParaxialTransform, name)
    __repr__ = _swig_repr

    def __init__(self):
        """

        Emit::CaptureParaxialTransform::CaptureParaxialTransform()

        """
        this = _camera_paraxial.new_CaptureParaxialTransform()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def paraxial_to_real(self, *args):
        """

        virtual void Emit::CaptureParaxialTransform::paraxial_to_real(double Paraxial_x, double Paraxial_y, double &Real_x, double &Real_y)
        const

        """
        return _camera_paraxial.CaptureParaxialTransform_paraxial_to_real(self, *args)


    def clear(self):
        """

        void Emit::CaptureParaxialTransform::clear()

        """
        return _camera_paraxial.CaptureParaxialTransform_clear(self)


    def _v_predict_x(self):
        """

        const std::vector<double>& Emit::CaptureParaxialTransform::predict_x() const

        """
        return _camera_paraxial.CaptureParaxialTransform__v_predict_x(self)


    @property
    def predict_x(self):
        return self._v_predict_x()


    def _v_predict_y(self):
        """

        const std::vector<double>& Emit::CaptureParaxialTransform::predict_y() const

        """
        return _camera_paraxial.CaptureParaxialTransform__v_predict_y(self)


    @property
    def predict_y(self):
        return self._v_predict_y()


    def _v_real_x(self):
        """

        const std::vector<double>& Emit::CaptureParaxialTransform::real_x() const

        """
        return _camera_paraxial.CaptureParaxialTransform__v_real_x(self)


    @property
    def real_x(self):
        return self._v_real_x()


    def _v_real_y(self):
        """

        const std::vector<double>& Emit::CaptureParaxialTransform::real_y() const

        """
        return _camera_paraxial.CaptureParaxialTransform__v_real_y(self)


    @property
    def real_y(self):
        return self._v_real_y()


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _camera_paraxial.delete_CaptureParaxialTransform
    __del__ = lambda self: None
CaptureParaxialTransform_swigregister = _camera_paraxial.CaptureParaxialTransform_swigregister
CaptureParaxialTransform_swigregister(CaptureParaxialTransform)

class CameraParaxial(geocal_swig.quaternion_camera.QuaternionCamera):
    """

    One model for a camera is to capture the nonlinearities by a
    ParaxialTransform.

    This maps between the focal plane x, y predicted by a linear camera,
    and the real x,y for the actual camera.

    Note that this is actually a fairly general model, we should probably
    move this into GeoCal. But for now keep separate so we don't need to
    depend on an updated version of geocal.

    C++ includes: camera_paraxial.h 
    """

    __swig_setmethods__ = {}
    for _s in [geocal_swig.quaternion_camera.QuaternionCamera]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraParaxial, name, value)
    __swig_getmethods__ = {}
    for _s in [geocal_swig.quaternion_camera.QuaternionCamera]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CameraParaxial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Emit::CameraParaxial::CameraParaxial(boost::math::quaternion< double > Frame_to_sc_q, double Number_line,
        double Number_sample, double Line_pitch, double Sample_pitch, double
        Focal_length, const GeoCal::FrameCoordinate &Principal_point, const
        boost::shared_ptr< ParaxialTransform > &P_transform, FrameConvention
        Frame_convention=GeoCal::QuaternionCamera::LINE_IS_X, FrameDirection
        Line_direction=GeoCal::QuaternionCamera::INCREASE_IS_POSITIVE,
        FrameDirection
        Sample_direction=GeoCal::QuaternionCamera::INCREASE_IS_POSITIVE)

        """
        this = _camera_paraxial.new_CameraParaxial(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def _v_paraxial_transform(self, *args):
        """

        void Emit::CameraParaxial::paraxial_transform(const boost::shared_ptr< ParaxialTransform > &v)

        """
        return _camera_paraxial.CameraParaxial__v_paraxial_transform(self, *args)


    @property
    def paraxial_transform(self):
        return self._v_paraxial_transform()

    @paraxial_transform.setter
    def paraxial_transform(self, value):
      self._v_paraxial_transform(value)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _camera_paraxial.delete_CameraParaxial
    __del__ = lambda self: None
CameraParaxial_swigregister = _camera_paraxial.CameraParaxial_swigregister
CameraParaxial_swigregister(CameraParaxial)


__all__ = ["ParaxialTransform","IdentityParaxialTransform","CaptureParaxialTransform","CameraParaxial"]

# This file is compatible with both classic and new-style classes.


