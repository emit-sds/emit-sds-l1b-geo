# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _emit_l1b_image

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _emit_l1b_image.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _emit_l1b_image.delete_SwigPyIterator

    def value(self):
        return _emit_l1b_image.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _emit_l1b_image.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _emit_l1b_image.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _emit_l1b_image.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _emit_l1b_image.SwigPyIterator_equal(self, x)

    def copy(self):
        return _emit_l1b_image.SwigPyIterator_copy(self)

    def next(self):
        return _emit_l1b_image.SwigPyIterator_next(self)

    def __next__(self):
        return _emit_l1b_image.SwigPyIterator___next__(self)

    def previous(self):
        return _emit_l1b_image.SwigPyIterator_previous(self)

    def advance(self, n):
        return _emit_l1b_image.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _emit_l1b_image.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _emit_l1b_image.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _emit_l1b_image.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _emit_l1b_image.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _emit_l1b_image.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _emit_l1b_image.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _emit_l1b_image:
_emit_l1b_image.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _emit_l1b_image.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.scale_image
import geocal_swig.calc_raster
import geocal_swig.raster_image_variable
import geocal_swig.raster_image
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
import geocal_swig.calc_raster_multi_band
class EmitL1bImage(geocal_swig.scale_image.ScaleImage):
    r"""

    We ran into an obscure bug in GDAL 3.2.1 where a specific file
    couldn't be opened because GDAL never identified it as ENVI
    (seehttps://github.jpl.nasa.gov/emit-sds/emit-sds-issue-
    tracking/issues/110 for details).

    This class opens a file and forces the ENVI driver to be used. We also
    scale the image, which is needed for doing image matching

    C++ includes: emit_l1b_image.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Fname, Band, Scale_factor):
        r"""

        Emit::EmitL1bImage::EmitL1bImage(const std::string &Fname, int Band, double Scale_factor)
        Emit::EmitL1bImage::EmitL1bImage
        """
        _emit_l1b_image.EmitL1bImage_swiginit(self, _emit_l1b_image.new_EmitL1bImage(Fname, Band, Scale_factor))

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _emit_l1b_image.delete_EmitL1bImage

# Register EmitL1bImage in _emit_l1b_image:
_emit_l1b_image.EmitL1bImage_swigregister(EmitL1bImage)

__all__ = ["EmitL1bImage"]


