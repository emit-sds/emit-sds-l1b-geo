# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _emit_time_table_base

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _emit_time_table_base.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _emit_time_table_base.delete_SwigPyIterator

    def value(self):
        return _emit_time_table_base.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _emit_time_table_base.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _emit_time_table_base.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _emit_time_table_base.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _emit_time_table_base.SwigPyIterator_equal(self, x)

    def copy(self):
        return _emit_time_table_base.SwigPyIterator_copy(self)

    def next(self):
        return _emit_time_table_base.SwigPyIterator_next(self)

    def __next__(self):
        return _emit_time_table_base.SwigPyIterator___next__(self)

    def previous(self):
        return _emit_time_table_base.SwigPyIterator_previous(self)

    def advance(self, n):
        return _emit_time_table_base.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _emit_time_table_base.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _emit_time_table_base.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _emit_time_table_base.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _emit_time_table_base.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _emit_time_table_base.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _emit_time_table_base.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _emit_time_table_base:
_emit_time_table_base.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _emit_time_table_base.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.time_table
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_time
class Vector_Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _emit_time_table_base.Vector_Time_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _emit_time_table_base.Vector_Time___nonzero__(self)

    def __bool__(self):
        return _emit_time_table_base.Vector_Time___bool__(self)

    def __len__(self):
        return _emit_time_table_base.Vector_Time___len__(self)

    def __getslice__(self, i, j):
        return _emit_time_table_base.Vector_Time___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _emit_time_table_base.Vector_Time___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _emit_time_table_base.Vector_Time___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _emit_time_table_base.Vector_Time___delitem__(self, *args)

    def __getitem__(self, *args):
        return _emit_time_table_base.Vector_Time___getitem__(self, *args)

    def __setitem__(self, *args):
        return _emit_time_table_base.Vector_Time___setitem__(self, *args)

    def pop(self):
        return _emit_time_table_base.Vector_Time_pop(self)

    def append(self, x):
        return _emit_time_table_base.Vector_Time_append(self, x)

    def empty(self):
        return _emit_time_table_base.Vector_Time_empty(self)

    def size(self):
        return _emit_time_table_base.Vector_Time_size(self)

    def swap(self, v):
        return _emit_time_table_base.Vector_Time_swap(self, v)

    def begin(self):
        return _emit_time_table_base.Vector_Time_begin(self)

    def end(self):
        return _emit_time_table_base.Vector_Time_end(self)

    def rbegin(self):
        return _emit_time_table_base.Vector_Time_rbegin(self)

    def rend(self):
        return _emit_time_table_base.Vector_Time_rend(self)

    def clear(self):
        return _emit_time_table_base.Vector_Time_clear(self)

    def get_allocator(self):
        return _emit_time_table_base.Vector_Time_get_allocator(self)

    def pop_back(self):
        return _emit_time_table_base.Vector_Time_pop_back(self)

    def erase(self, *args):
        return _emit_time_table_base.Vector_Time_erase(self, *args)

    def __init__(self, *args):
        _emit_time_table_base.Vector_Time_swiginit(self, _emit_time_table_base.new_Vector_Time(*args))

    def push_back(self, x):
        return _emit_time_table_base.Vector_Time_push_back(self, x)

    def front(self):
        return _emit_time_table_base.Vector_Time_front(self)

    def back(self):
        return _emit_time_table_base.Vector_Time_back(self)

    def assign(self, n, x):
        return _emit_time_table_base.Vector_Time_assign(self, n, x)

    def resize(self, *args):
        return _emit_time_table_base.Vector_Time_resize(self, *args)

    def insert(self, *args):
        return _emit_time_table_base.Vector_Time_insert(self, *args)

    def reserve(self, n):
        return _emit_time_table_base.Vector_Time_reserve(self, n)

    def capacity(self):
        return _emit_time_table_base.Vector_Time_capacity(self)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _emit_time_table_base.delete_Vector_Time

# Register Vector_Time in _emit_time_table_base:
_emit_time_table_base.Vector_Time_swigregister(Vector_Time)
class Vector_Time2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _emit_time_table_base.Vector_Time2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _emit_time_table_base.Vector_Time2___nonzero__(self)

    def __bool__(self):
        return _emit_time_table_base.Vector_Time2___bool__(self)

    def __len__(self):
        return _emit_time_table_base.Vector_Time2___len__(self)

    def __getslice__(self, i, j):
        return _emit_time_table_base.Vector_Time2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _emit_time_table_base.Vector_Time2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _emit_time_table_base.Vector_Time2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _emit_time_table_base.Vector_Time2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _emit_time_table_base.Vector_Time2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _emit_time_table_base.Vector_Time2___setitem__(self, *args)

    def pop(self):
        return _emit_time_table_base.Vector_Time2_pop(self)

    def append(self, x):
        return _emit_time_table_base.Vector_Time2_append(self, x)

    def empty(self):
        return _emit_time_table_base.Vector_Time2_empty(self)

    def size(self):
        return _emit_time_table_base.Vector_Time2_size(self)

    def swap(self, v):
        return _emit_time_table_base.Vector_Time2_swap(self, v)

    def begin(self):
        return _emit_time_table_base.Vector_Time2_begin(self)

    def end(self):
        return _emit_time_table_base.Vector_Time2_end(self)

    def rbegin(self):
        return _emit_time_table_base.Vector_Time2_rbegin(self)

    def rend(self):
        return _emit_time_table_base.Vector_Time2_rend(self)

    def clear(self):
        return _emit_time_table_base.Vector_Time2_clear(self)

    def get_allocator(self):
        return _emit_time_table_base.Vector_Time2_get_allocator(self)

    def pop_back(self):
        return _emit_time_table_base.Vector_Time2_pop_back(self)

    def erase(self, *args):
        return _emit_time_table_base.Vector_Time2_erase(self, *args)

    def __init__(self, *args):
        _emit_time_table_base.Vector_Time2_swiginit(self, _emit_time_table_base.new_Vector_Time2(*args))

    def push_back(self, x):
        return _emit_time_table_base.Vector_Time2_push_back(self, x)

    def front(self):
        return _emit_time_table_base.Vector_Time2_front(self)

    def back(self):
        return _emit_time_table_base.Vector_Time2_back(self)

    def assign(self, n, x):
        return _emit_time_table_base.Vector_Time2_assign(self, n, x)

    def resize(self, *args):
        return _emit_time_table_base.Vector_Time2_resize(self, *args)

    def insert(self, *args):
        return _emit_time_table_base.Vector_Time2_insert(self, *args)

    def reserve(self, n):
        return _emit_time_table_base.Vector_Time2_reserve(self, n)

    def capacity(self):
        return _emit_time_table_base.Vector_Time2_capacity(self)
    __swig_destroy__ = _emit_time_table_base.delete_Vector_Time2

# Register Vector_Time2 in _emit_time_table_base:
_emit_time_table_base.Vector_Time2_swigregister(Vector_Time2)
class EmitTimeTableBase(geocal_swig.time_table.MeasuredTimeTable):
    r"""

    This is a MeasuredTimeTable, where we also add support for reversing
    the image data.

    We separate this out from EmitTimeTable just to have the interface a
    little simpler - we already have python EmitTimeTable.

    C++ includes: emit_time_table_base.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Time_list, Number_sample, Reverse_image, Min_line=0):
        r"""

        Emit::EmitTimeTableBase::EmitTimeTableBase(const std::vector< GeoCal::Time > &Time_list, int Number_sample, bool
        Reverse_image, int Min_line=0)
        Emit::EmitTimeTableBase::EmitTimeTableBase
        Constructor.

        """
        _emit_time_table_base.EmitTimeTableBase_swiginit(self, _emit_time_table_base.new_EmitTimeTableBase(Time_list, Number_sample, Reverse_image, Min_line))

    def _v_number_sample(self):
        r"""

        int Emit::EmitTimeTableBase::number_sample() const
        Emit::EmitTimeTableBase::number_sample
        """
        return _emit_time_table_base.EmitTimeTableBase__v_number_sample(self)

    @property
    def number_sample(self):
        return self._v_number_sample()


    def _v_reverse_image(self):
        r"""

        bool Emit::EmitTimeTableBase::reverse_image() const
        Emit::EmitTimeTableBase::reverse_image
        """
        return _emit_time_table_base.EmitTimeTableBase__v_reverse_image(self)

    @property
    def reverse_image(self):
        return self._v_reverse_image()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _emit_time_table_base.delete_EmitTimeTableBase

# Register EmitTimeTableBase in _emit_time_table_base:
_emit_time_table_base.EmitTimeTableBase_swigregister(EmitTimeTableBase)

__all__ = ["EmitTimeTableBase"]


