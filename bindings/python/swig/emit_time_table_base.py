# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_emit_time_table_base')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_emit_time_table_base')
    _emit_time_table_base = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_emit_time_table_base', [dirname(__file__)])
        except ImportError:
            import _emit_time_table_base
            return _emit_time_table_base
        try:
            _mod = imp.load_module('_emit_time_table_base', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _emit_time_table_base = swig_import_helper()
    del swig_import_helper
else:
    import _emit_time_table_base
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _emit_time_table_base.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _emit_time_table_base.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _emit_time_table_base.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _emit_time_table_base.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _emit_time_table_base.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _emit_time_table_base.SwigPyIterator_equal(self, x)

    def copy(self):
        return _emit_time_table_base.SwigPyIterator_copy(self)

    def next(self):
        return _emit_time_table_base.SwigPyIterator_next(self)

    def __next__(self):
        return _emit_time_table_base.SwigPyIterator___next__(self)

    def previous(self):
        return _emit_time_table_base.SwigPyIterator_previous(self)

    def advance(self, n):
        return _emit_time_table_base.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _emit_time_table_base.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _emit_time_table_base.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _emit_time_table_base.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _emit_time_table_base.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _emit_time_table_base.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _emit_time_table_base.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _emit_time_table_base.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _emit_time_table_base.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.time_table
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_time
class Vector_Time(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_Time, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_Time, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _emit_time_table_base.Vector_Time_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _emit_time_table_base.Vector_Time___nonzero__(self)

    def __bool__(self):
        return _emit_time_table_base.Vector_Time___bool__(self)

    def __len__(self):
        return _emit_time_table_base.Vector_Time___len__(self)

    def __getslice__(self, i, j):
        return _emit_time_table_base.Vector_Time___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _emit_time_table_base.Vector_Time___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _emit_time_table_base.Vector_Time___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _emit_time_table_base.Vector_Time___delitem__(self, *args)

    def __getitem__(self, *args):
        return _emit_time_table_base.Vector_Time___getitem__(self, *args)

    def __setitem__(self, *args):
        return _emit_time_table_base.Vector_Time___setitem__(self, *args)

    def pop(self):
        return _emit_time_table_base.Vector_Time_pop(self)

    def append(self, x):
        return _emit_time_table_base.Vector_Time_append(self, x)

    def empty(self):
        return _emit_time_table_base.Vector_Time_empty(self)

    def size(self):
        return _emit_time_table_base.Vector_Time_size(self)

    def swap(self, v):
        return _emit_time_table_base.Vector_Time_swap(self, v)

    def begin(self):
        return _emit_time_table_base.Vector_Time_begin(self)

    def end(self):
        return _emit_time_table_base.Vector_Time_end(self)

    def rbegin(self):
        return _emit_time_table_base.Vector_Time_rbegin(self)

    def rend(self):
        return _emit_time_table_base.Vector_Time_rend(self)

    def clear(self):
        return _emit_time_table_base.Vector_Time_clear(self)

    def get_allocator(self):
        return _emit_time_table_base.Vector_Time_get_allocator(self)

    def pop_back(self):
        return _emit_time_table_base.Vector_Time_pop_back(self)

    def erase(self, *args):
        return _emit_time_table_base.Vector_Time_erase(self, *args)

    def __init__(self, *args):
        this = _emit_time_table_base.new_Vector_Time(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _emit_time_table_base.Vector_Time_push_back(self, x)

    def front(self):
        return _emit_time_table_base.Vector_Time_front(self)

    def back(self):
        return _emit_time_table_base.Vector_Time_back(self)

    def assign(self, n, x):
        return _emit_time_table_base.Vector_Time_assign(self, n, x)

    def resize(self, *args):
        return _emit_time_table_base.Vector_Time_resize(self, *args)

    def insert(self, *args):
        return _emit_time_table_base.Vector_Time_insert(self, *args)

    def reserve(self, n):
        return _emit_time_table_base.Vector_Time_reserve(self, n)

    def capacity(self):
        return _emit_time_table_base.Vector_Time_capacity(self)

    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _emit_time_table_base.delete_Vector_Time
    __del__ = lambda self: None
Vector_Time_swigregister = _emit_time_table_base.Vector_Time_swigregister
Vector_Time_swigregister(Vector_Time)

class Vector_Time2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_Time2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_Time2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _emit_time_table_base.Vector_Time2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _emit_time_table_base.Vector_Time2___nonzero__(self)

    def __bool__(self):
        return _emit_time_table_base.Vector_Time2___bool__(self)

    def __len__(self):
        return _emit_time_table_base.Vector_Time2___len__(self)

    def __getslice__(self, i, j):
        return _emit_time_table_base.Vector_Time2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _emit_time_table_base.Vector_Time2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _emit_time_table_base.Vector_Time2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _emit_time_table_base.Vector_Time2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _emit_time_table_base.Vector_Time2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _emit_time_table_base.Vector_Time2___setitem__(self, *args)

    def pop(self):
        return _emit_time_table_base.Vector_Time2_pop(self)

    def append(self, x):
        return _emit_time_table_base.Vector_Time2_append(self, x)

    def empty(self):
        return _emit_time_table_base.Vector_Time2_empty(self)

    def size(self):
        return _emit_time_table_base.Vector_Time2_size(self)

    def swap(self, v):
        return _emit_time_table_base.Vector_Time2_swap(self, v)

    def begin(self):
        return _emit_time_table_base.Vector_Time2_begin(self)

    def end(self):
        return _emit_time_table_base.Vector_Time2_end(self)

    def rbegin(self):
        return _emit_time_table_base.Vector_Time2_rbegin(self)

    def rend(self):
        return _emit_time_table_base.Vector_Time2_rend(self)

    def clear(self):
        return _emit_time_table_base.Vector_Time2_clear(self)

    def get_allocator(self):
        return _emit_time_table_base.Vector_Time2_get_allocator(self)

    def pop_back(self):
        return _emit_time_table_base.Vector_Time2_pop_back(self)

    def erase(self, *args):
        return _emit_time_table_base.Vector_Time2_erase(self, *args)

    def __init__(self, *args):
        this = _emit_time_table_base.new_Vector_Time2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _emit_time_table_base.Vector_Time2_push_back(self, x)

    def front(self):
        return _emit_time_table_base.Vector_Time2_front(self)

    def back(self):
        return _emit_time_table_base.Vector_Time2_back(self)

    def assign(self, n, x):
        return _emit_time_table_base.Vector_Time2_assign(self, n, x)

    def resize(self, *args):
        return _emit_time_table_base.Vector_Time2_resize(self, *args)

    def insert(self, *args):
        return _emit_time_table_base.Vector_Time2_insert(self, *args)

    def reserve(self, n):
        return _emit_time_table_base.Vector_Time2_reserve(self, n)

    def capacity(self):
        return _emit_time_table_base.Vector_Time2_capacity(self)
    __swig_destroy__ = _emit_time_table_base.delete_Vector_Time2
    __del__ = lambda self: None
Vector_Time2_swigregister = _emit_time_table_base.Vector_Time2_swigregister
Vector_Time2_swigregister(Vector_Time2)

class EmitTimeTableBase(geocal_swig.time_table.MeasuredTimeTable):
    """

    This is a MeasuredTimeTable, where we also add support for reversing
    the image data.

    We separate this out from EmitTimeTable just to have the interface a
    little simpler - we already have python EmitTimeTable.

    C++ includes: emit_time_table_base.h 
    """

    __swig_setmethods__ = {}
    for _s in [geocal_swig.time_table.MeasuredTimeTable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmitTimeTableBase, name, value)
    __swig_getmethods__ = {}
    for _s in [geocal_swig.time_table.MeasuredTimeTable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EmitTimeTableBase, name)
    __repr__ = _swig_repr

    def __init__(self, Time_list, Min_line=0):
        """

        Emit::EmitTimeTableBase::EmitTimeTableBase(const std::vector< GeoCal::Time > &Time_list, int Min_line=0)
        Constructor. 
        """
        this = _emit_time_table_base.new_EmitTimeTableBase(Time_list, Min_line)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _emit_time_table_base.delete_EmitTimeTableBase
    __del__ = lambda self: None
EmitTimeTableBase_swigregister = _emit_time_table_base.EmitTimeTableBase_swigregister
EmitTimeTableBase_swigregister(EmitTimeTableBase)


__all__ = ["EmitTimeTableBase"]

# This file is compatible with both classic and new-style classes.


