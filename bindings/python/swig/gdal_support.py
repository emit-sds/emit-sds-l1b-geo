# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _gdal_support

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _gdal_support.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gdal_support.delete_SwigPyIterator

    def value(self):
        return _gdal_support.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _gdal_support.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _gdal_support.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _gdal_support.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _gdal_support.SwigPyIterator_equal(self, x)

    def copy(self):
        return _gdal_support.SwigPyIterator_copy(self)

    def next(self):
        return _gdal_support.SwigPyIterator_next(self)

    def __next__(self):
        return _gdal_support.SwigPyIterator___next__(self)

    def previous(self):
        return _gdal_support.SwigPyIterator_previous(self)

    def advance(self, n):
        return _gdal_support.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _gdal_support.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _gdal_support.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _gdal_support.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _gdal_support.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _gdal_support.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _gdal_support.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _gdal_support:
_gdal_support.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _gdal_support.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.raster_image_tiled_file
import geocal_swig.raster_image_variable
import geocal_swig.raster_image
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception

def set_file_description(Img, Desc):
    r"""

    void Emit::set_file_description(const boost::shared_ptr< GeoCal::GdalRasterImage > &Img, const
    std::string &Desc)
    GeoCal doesn't happen to have support for writing a file description.

    This should probably migrate into geocal at some point, but for now
    just provide our own function in Emit for this. 
    """
    return _gdal_support.set_file_description(Img, Desc)

def set_band_description(Img, Desc):
    r"""

    void Emit::set_band_description(const boost::shared_ptr< GeoCal::GdalRasterImage > &Img, const
    std::string &Desc)
    GeoCal doesn't happen to have support for writing a band description.

    This should probably migrate into geocal at some point, but for now
    just provide our own function in Emit for this. 
    """
    return _gdal_support.set_band_description(Img, Desc)

def set_band_metadata(*args):
    r"""

    void Emit::set_band_metadata(const boost::shared_ptr< GeoCal::GdalRasterImage > &Img, const
    std::string &M, const std::string &Val, const std::string
    &Domain="ENVI")
    GeoCal doesn't happen to have support for writing a band (as opposed
    to file) metadata.

    This should probably migrate into geocal at some point, but for now
    just provide our own function in Emit for this.

    NOTE: It turns out that gdal (as of 2.4) doesn't support band metadata
    directly in the ENVI header. This is different than description, which
    it does support. We can easily work around this by treating thinks
    like wavelength as a file level item, and just directly create the "{
    wavelength 1, wavelength 2, ...}" string in ENVI. GDAL does put this
    in the auxilary .xml file, but we don't want to depend on that. 
    """
    return _gdal_support.set_band_metadata(*args)

def open_file_force_envi(Fname, Band):
    r"""

    boost::shared_ptr< GeoCal::GdalRasterImage > Emit::open_file_force_envi(const std::string &Fname, int Band)
    We ran into an obscure bug in GDAL 3.2.1 where a specific file
    couldn't be opened because GDAL never identified it as ENVI
    (seehttps://github.jpl.nasa.gov/emit-sds/emit-sds-issue-
    tracking/issues/110 for details).

    This function opens a file and forces the ENVI driver to be used. 
    """
    return _gdal_support.open_file_force_envi(Fname, Band)

