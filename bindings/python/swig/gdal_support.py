# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_gdal_support')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_gdal_support')
    _gdal_support = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gdal_support', [dirname(__file__)])
        except ImportError:
            import _gdal_support
            return _gdal_support
        try:
            _mod = imp.load_module('_gdal_support', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _gdal_support = swig_import_helper()
    del swig_import_helper
else:
    import _gdal_support
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gdal_support.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _gdal_support.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _gdal_support.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _gdal_support.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _gdal_support.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _gdal_support.SwigPyIterator_equal(self, x)

    def copy(self):
        return _gdal_support.SwigPyIterator_copy(self)

    def next(self):
        return _gdal_support.SwigPyIterator_next(self)

    def __next__(self):
        return _gdal_support.SwigPyIterator___next__(self)

    def previous(self):
        return _gdal_support.SwigPyIterator_previous(self)

    def advance(self, n):
        return _gdal_support.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _gdal_support.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _gdal_support.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _gdal_support.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _gdal_support.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _gdal_support.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _gdal_support.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _gdal_support.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _gdal_support.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.raster_image_tiled_file
import geocal_swig.raster_image_variable
import geocal_swig.raster_image
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception

def set_file_description(Img, Desc):
    """

    void Emit::set_file_description(const boost::shared_ptr< GeoCal::GdalRasterImage > &Img, const
    std::string &Desc)
    GeoCal doesn't happen to have support for writing a file description.

    This should probably migrate into geocal at some point, but for now
    just provide our own function in Emit for this. 
    """
    return _gdal_support.set_file_description(Img, Desc)

def set_band_description(Img, Desc):
    """

    void Emit::set_band_description(const boost::shared_ptr< GeoCal::GdalRasterImage > &Img, const
    std::string &Desc)
    GeoCal doesn't happen to have support for writing a band description.

    This should probably migrate into geocal at some point, but for now
    just provide our own function in Emit for this. 
    """
    return _gdal_support.set_band_description(Img, Desc)

def set_band_metadata(*args):
    """

    void Emit::set_band_metadata(const boost::shared_ptr< GeoCal::GdalRasterImage > &Img, const
    std::string &M, const std::string &Val, const std::string
    &Domain="ENVI")
    GeoCal doesn't happen to have support for writing a band (as opposed
    to file) metadata.

    This should probably migrate into geocal at some point, but for now
    just provide our own function in Emit for this.

    NOTE: It turns out that gdal (as of 2.4) doesn't support band metadata
    directly in the ENVI header. This is different than description, which
    it does support. We can easily work around this by treating thinks
    like wavelength as a file level item, and just directly create the "{
    wavelength 1, wavelength 2, ...}" string in ENVI. GDAL does put this
    in the auxilary .xml file, but we don't want to depend on that. 
    """
    return _gdal_support.set_band_metadata(*args)
# This file is compatible with both classic and new-style classes.


