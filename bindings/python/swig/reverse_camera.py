# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _reverse_camera

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _reverse_camera.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _reverse_camera.delete_SwigPyIterator

    def value(self):
        return _reverse_camera.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _reverse_camera.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _reverse_camera.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _reverse_camera.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _reverse_camera.SwigPyIterator_equal(self, x)

    def copy(self):
        return _reverse_camera.SwigPyIterator_copy(self)

    def next(self):
        return _reverse_camera.SwigPyIterator_next(self)

    def __next__(self):
        return _reverse_camera.SwigPyIterator___next__(self)

    def previous(self):
        return _reverse_camera.SwigPyIterator_previous(self)

    def advance(self, n):
        return _reverse_camera.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _reverse_camera.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _reverse_camera.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _reverse_camera.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _reverse_camera.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _reverse_camera.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _reverse_camera.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _reverse_camera:
_reverse_camera.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _reverse_camera.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.camera
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
class ReverseCamera(geocal_swig.camera.Camera):
    r"""

    We should be able to reverse the image with our EmitTimeTable, however
    geocal incorrectly assumes that FrameCoordinate and ImageCoordinate
    are the same thing when it is doing IgcRayCaster.

    We should fix that, but in the mean time we can handle the image
    reversal by reversing the camera rather than the time table.

    C++ includes: reverse_camera.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Cam):
        r"""

        Emit::ReverseCamera::ReverseCamera(const boost::shared_ptr< GeoCal::Camera > &Cam)

        """
        _reverse_camera.ReverseCamera_swiginit(self, _reverse_camera.new_ReverseCamera(Cam))

    def number_line(self, Band):
        r"""

        virtual int Emit::ReverseCamera::number_line(int Band) const

        """
        return _reverse_camera.ReverseCamera_number_line(self, Band)

    def number_sample(self, Band):
        r"""

        virtual int Emit::ReverseCamera::number_sample(int Band) const

        """
        return _reverse_camera.ReverseCamera_number_sample(self, Band)

    def frame_coordinate(self, Sl, Band):
        r"""

        virtual GeoCal::FrameCoordinate Emit::ReverseCamera::frame_coordinate(const GeoCal::ScLookVector &Sl, int Band) const

        """
        return _reverse_camera.ReverseCamera_frame_coordinate(self, Sl, Band)

    def frame_coordinate_with_derivative(self, Sl, Band):
        r"""

        virtual GeoCal::FrameCoordinateWithDerivative Emit::ReverseCamera::frame_coordinate_with_derivative(const GeoCal::ScLookVectorWithDerivative &Sl, int Band) const

        """
        return _reverse_camera.ReverseCamera_frame_coordinate_with_derivative(self, Sl, Band)

    def sc_look_vector(self, F, Band):
        r"""

        virtual GeoCal::ScLookVector Emit::ReverseCamera::sc_look_vector(const GeoCal::FrameCoordinate &F, int Band) const

        """
        return _reverse_camera.ReverseCamera_sc_look_vector(self, F, Band)

    def sc_look_vector_with_derivative(self, F, Band):
        r"""

        virtual GeoCal::ScLookVectorWithDerivative Emit::ReverseCamera::sc_look_vector_with_derivative(const GeoCal::FrameCoordinateWithDerivative &F, int Band) const

        """
        return _reverse_camera.ReverseCamera_sc_look_vector_with_derivative(self, F, Band)

    def _v_original_camera(self):
        r"""

        const boost::shared_ptr<GeoCal::Camera>& Emit::ReverseCamera::original_camera() const

        """
        return _reverse_camera.ReverseCamera__v_original_camera(self)

    @property
    def original_camera(self):
        return self._v_original_camera()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _reverse_camera.delete_ReverseCamera

# Register ReverseCamera in _reverse_camera:
_reverse_camera.ReverseCamera_swigregister(ReverseCamera)

__all__ = ["ReverseCamera"]


