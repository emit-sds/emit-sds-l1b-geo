# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_reverse_camera')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_reverse_camera')
    _reverse_camera = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_reverse_camera', [dirname(__file__)])
        except ImportError:
            import _reverse_camera
            return _reverse_camera
        try:
            _mod = imp.load_module('_reverse_camera', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _reverse_camera = swig_import_helper()
    del swig_import_helper
else:
    import _reverse_camera
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _reverse_camera.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _reverse_camera.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _reverse_camera.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _reverse_camera.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _reverse_camera.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _reverse_camera.SwigPyIterator_equal(self, x)

    def copy(self):
        return _reverse_camera.SwigPyIterator_copy(self)

    def next(self):
        return _reverse_camera.SwigPyIterator_next(self)

    def __next__(self):
        return _reverse_camera.SwigPyIterator___next__(self)

    def previous(self):
        return _reverse_camera.SwigPyIterator_previous(self)

    def advance(self, n):
        return _reverse_camera.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _reverse_camera.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _reverse_camera.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _reverse_camera.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _reverse_camera.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _reverse_camera.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _reverse_camera.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _reverse_camera.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _reverse_camera.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.camera
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
class ReverseCamera(geocal_swig.camera.Camera):
    """

    We should be able to reverse the image with our EmitTimeTable, however
    geocal incorrectly assumes that FrameCoordinate and ImageCoordinate
    are the same thing when it is doing IgcRayCaster.

    We should fix that, but in the mean time we can handle the image
    reversal by reversing the camera rather than the time table.

    C++ includes: reverse_camera.h 
    """

    __swig_setmethods__ = {}
    for _s in [geocal_swig.camera.Camera]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReverseCamera, name, value)
    __swig_getmethods__ = {}
    for _s in [geocal_swig.camera.Camera]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReverseCamera, name)
    __repr__ = _swig_repr

    def __init__(self, Cam):
        """

        Emit::ReverseCamera::ReverseCamera(const boost::shared_ptr< GeoCal::Camera > &Cam)

        """
        this = _reverse_camera.new_ReverseCamera(Cam)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def number_line(self, Band):
        """

        virtual int Emit::ReverseCamera::number_line(int Band) const

        """
        return _reverse_camera.ReverseCamera_number_line(self, Band)


    def number_sample(self, Band):
        """

        virtual int Emit::ReverseCamera::number_sample(int Band) const

        """
        return _reverse_camera.ReverseCamera_number_sample(self, Band)


    def frame_coordinate(self, Sl, Band):
        """

        virtual GeoCal::FrameCoordinate Emit::ReverseCamera::frame_coordinate(const GeoCal::ScLookVector &Sl, int Band) const

        """
        return _reverse_camera.ReverseCamera_frame_coordinate(self, Sl, Band)


    def frame_coordinate_with_derivative(self, Sl, Band):
        """

        virtual GeoCal::FrameCoordinateWithDerivative Emit::ReverseCamera::frame_coordinate_with_derivative(const GeoCal::ScLookVectorWithDerivative &Sl, int Band) const

        """
        return _reverse_camera.ReverseCamera_frame_coordinate_with_derivative(self, Sl, Band)


    def sc_look_vector(self, F, Band):
        """

        virtual GeoCal::ScLookVector Emit::ReverseCamera::sc_look_vector(const GeoCal::FrameCoordinate &F, int Band) const

        """
        return _reverse_camera.ReverseCamera_sc_look_vector(self, F, Band)


    def sc_look_vector_with_derivative(self, F, Band):
        """

        virtual GeoCal::ScLookVectorWithDerivative Emit::ReverseCamera::sc_look_vector_with_derivative(const GeoCal::FrameCoordinateWithDerivative &F, int Band) const

        """
        return _reverse_camera.ReverseCamera_sc_look_vector_with_derivative(self, F, Band)


    def _v_original_camera(self):
        """

        const boost::shared_ptr<GeoCal::Camera>& Emit::ReverseCamera::original_camera() const

        """
        return _reverse_camera.ReverseCamera__v_original_camera(self)


    @property
    def original_camera(self):
        return self._v_original_camera()


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _reverse_camera.delete_ReverseCamera
    __del__ = lambda self: None
ReverseCamera_swigregister = _reverse_camera.ReverseCamera_swigregister
ReverseCamera_swigregister(ReverseCamera)


__all__ = ["ReverseCamera"]

# This file is compatible with both classic and new-style classes.


