# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_polynomial_paraxial_transform')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_polynomial_paraxial_transform')
    _polynomial_paraxial_transform = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_polynomial_paraxial_transform', [dirname(__file__)])
        except ImportError:
            import _polynomial_paraxial_transform
            return _polynomial_paraxial_transform
        try:
            _mod = imp.load_module('_polynomial_paraxial_transform', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _polynomial_paraxial_transform = swig_import_helper()
    del swig_import_helper
else:
    import _polynomial_paraxial_transform
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _polynomial_paraxial_transform.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _polynomial_paraxial_transform.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _polynomial_paraxial_transform.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _polynomial_paraxial_transform.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _polynomial_paraxial_transform.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _polynomial_paraxial_transform.SwigPyIterator_equal(self, x)

    def copy(self):
        return _polynomial_paraxial_transform.SwigPyIterator_copy(self)

    def next(self):
        return _polynomial_paraxial_transform.SwigPyIterator_next(self)

    def __next__(self):
        return _polynomial_paraxial_transform.SwigPyIterator___next__(self)

    def previous(self):
        return _polynomial_paraxial_transform.SwigPyIterator_previous(self)

    def advance(self, n):
        return _polynomial_paraxial_transform.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _polynomial_paraxial_transform.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _polynomial_paraxial_transform.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _polynomial_paraxial_transform.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _polynomial_paraxial_transform.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _polynomial_paraxial_transform.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _polynomial_paraxial_transform.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _polynomial_paraxial_transform.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _polynomial_paraxial_transform.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import emit_swig.camera_paraxial
import geocal_swig.generic_object
import geocal_swig.quaternion_camera
import geocal_swig.observer
import geocal_swig.camera
import geocal_swig.with_parameter
class PolynomialParaxialTransform_3d_3d(emit_swig.camera_paraxial.ParaxialTransform):
    """

    A common ParaxialTransform is to just use a polynomial to model the
    data.

    This implements that.

    C++ includes: polynomial_paraxial_transform.h 
    """

    __swig_setmethods__ = {}
    for _s in [emit_swig.camera_paraxial.ParaxialTransform]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolynomialParaxialTransform_3d_3d, name, value)
    __swig_getmethods__ = {}
    for _s in [emit_swig.camera_paraxial.ParaxialTransform]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolynomialParaxialTransform_3d_3d, name)
    __repr__ = _swig_repr

    def __init__(self):
        """

        Emit::PolynomialParaxialTransform< D1, D2 >::PolynomialParaxialTransform()
        Emit::PolynomialParaxialTransform::PolynomialParaxialTransform
        We populate the transform separately, so just have a default
        constructor.

        """
        this = _polynomial_paraxial_transform.new_PolynomialParaxialTransform_3d_3d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def paraxial_to_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::paraxial_to_real(double Paraxial_x, double Paraxial_y, double &Real_x, double &Real_y)
        const
        Emit::PolynomialParaxialTransform::paraxial_to_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d_paraxial_to_real(self, *args)


    def _v_par_to_real(self):
        """

        const blitz::Array< double, 2 > & Emit::PolynomialParaxialTransform< D1, D2 >::par_to_real() const
        Emit::PolynomialParaxialTransform::par_to_real
        Polynomial from paraxial to real.

        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_par_to_real(self)


    @property
    def par_to_real(self):
        return self._v_par_to_real()


    def _v_real_to_par(self):
        """

        const blitz::Array< double, 2 > & Emit::PolynomialParaxialTransform< D1, D2 >::real_to_par() const
        Emit::PolynomialParaxialTransform::real_to_par
        Polynomial from real to paraxial.

        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_real_to_par(self)


    @property
    def real_to_par(self):
        return self._v_real_to_par()


    def _v_min_x_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_x_real(double V)
        Emit::PolynomialParaxialTransform::min_x_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_min_x_real(self, *args)


    @property
    def min_x_real(self):
        return self._v_min_x_real()

    @min_x_real.setter
    def min_x_real(self, value):
      self._v_min_x_real(value)


    def _v_max_x_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_x_real(double V)
        Emit::PolynomialParaxialTransform::max_x_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_max_x_real(self, *args)


    @property
    def max_x_real(self):
        return self._v_max_x_real()

    @max_x_real.setter
    def max_x_real(self, value):
      self._v_max_x_real(value)


    def _v_min_y_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_y_real(double V)
        Emit::PolynomialParaxialTransform::min_y_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_min_y_real(self, *args)


    @property
    def min_y_real(self):
        return self._v_min_y_real()

    @min_y_real.setter
    def min_y_real(self, value):
      self._v_min_y_real(value)


    def _v_max_y_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_y_real(double V)
        Emit::PolynomialParaxialTransform::max_y_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_max_y_real(self, *args)


    @property
    def max_y_real(self):
        return self._v_max_y_real()

    @max_y_real.setter
    def max_y_real(self, value):
      self._v_max_y_real(value)


    def _v_min_x_pred(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_x_pred(double V)
        Emit::PolynomialParaxialTransform::min_x_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_min_x_pred(self, *args)


    @property
    def min_x_pred(self):
        return self._v_min_x_pred()

    @min_x_pred.setter
    def min_x_pred(self, value):
      self._v_min_x_pred(value)


    def _v_max_x_pred(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_x_pred(double V)
        Emit::PolynomialParaxialTransform::max_x_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_max_x_pred(self, *args)


    @property
    def max_x_pred(self):
        return self._v_max_x_pred()

    @max_x_pred.setter
    def max_x_pred(self, value):
      self._v_max_x_pred(value)


    def _v_min_y_pred(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_y_pred(double V)
        Emit::PolynomialParaxialTransform::min_y_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_min_y_pred(self, *args)


    @property
    def min_y_pred(self):
        return self._v_min_y_pred()

    @min_y_pred.setter
    def min_y_pred(self, value):
      self._v_min_y_pred(value)


    def _v_max_y_pred(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_y_pred(double V)
        Emit::PolynomialParaxialTransform::max_y_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_max_y_pred(self, *args)


    @property
    def max_y_pred(self):
        return self._v_max_y_pred()

    @max_y_pred.setter
    def max_y_pred(self, value):
      self._v_max_y_pred(value)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _polynomial_paraxial_transform.delete_PolynomialParaxialTransform_3d_3d
    __del__ = lambda self: None
PolynomialParaxialTransform_3d_3d_swigregister = _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d_swigregister
PolynomialParaxialTransform_3d_3d_swigregister(PolynomialParaxialTransform_3d_3d)

class PolynomialParaxialTransform_3d_5d(emit_swig.camera_paraxial.ParaxialTransform):
    """

    A common ParaxialTransform is to just use a polynomial to model the
    data.

    This implements that.

    C++ includes: polynomial_paraxial_transform.h 
    """

    __swig_setmethods__ = {}
    for _s in [emit_swig.camera_paraxial.ParaxialTransform]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolynomialParaxialTransform_3d_5d, name, value)
    __swig_getmethods__ = {}
    for _s in [emit_swig.camera_paraxial.ParaxialTransform]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolynomialParaxialTransform_3d_5d, name)
    __repr__ = _swig_repr

    def __init__(self):
        """

        Emit::PolynomialParaxialTransform< D1, D2 >::PolynomialParaxialTransform()
        Emit::PolynomialParaxialTransform::PolynomialParaxialTransform
        We populate the transform separately, so just have a default
        constructor.

        """
        this = _polynomial_paraxial_transform.new_PolynomialParaxialTransform_3d_5d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def paraxial_to_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::paraxial_to_real(double Paraxial_x, double Paraxial_y, double &Real_x, double &Real_y)
        const
        Emit::PolynomialParaxialTransform::paraxial_to_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d_paraxial_to_real(self, *args)


    def _v_par_to_real(self):
        """

        const blitz::Array< double, 2 > & Emit::PolynomialParaxialTransform< D1, D2 >::par_to_real() const
        Emit::PolynomialParaxialTransform::par_to_real
        Polynomial from paraxial to real.

        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_par_to_real(self)


    @property
    def par_to_real(self):
        return self._v_par_to_real()


    def _v_real_to_par(self):
        """

        const blitz::Array< double, 2 > & Emit::PolynomialParaxialTransform< D1, D2 >::real_to_par() const
        Emit::PolynomialParaxialTransform::real_to_par
        Polynomial from real to paraxial.

        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_real_to_par(self)


    @property
    def real_to_par(self):
        return self._v_real_to_par()


    def _v_min_x_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_x_real(double V)
        Emit::PolynomialParaxialTransform::min_x_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_min_x_real(self, *args)


    @property
    def min_x_real(self):
        return self._v_min_x_real()

    @min_x_real.setter
    def min_x_real(self, value):
      self._v_min_x_real(value)


    def _v_max_x_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_x_real(double V)
        Emit::PolynomialParaxialTransform::max_x_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_max_x_real(self, *args)


    @property
    def max_x_real(self):
        return self._v_max_x_real()

    @max_x_real.setter
    def max_x_real(self, value):
      self._v_max_x_real(value)


    def _v_min_y_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_y_real(double V)
        Emit::PolynomialParaxialTransform::min_y_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_min_y_real(self, *args)


    @property
    def min_y_real(self):
        return self._v_min_y_real()

    @min_y_real.setter
    def min_y_real(self, value):
      self._v_min_y_real(value)


    def _v_max_y_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_y_real(double V)
        Emit::PolynomialParaxialTransform::max_y_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_max_y_real(self, *args)


    @property
    def max_y_real(self):
        return self._v_max_y_real()

    @max_y_real.setter
    def max_y_real(self, value):
      self._v_max_y_real(value)


    def _v_min_x_pred(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_x_pred(double V)
        Emit::PolynomialParaxialTransform::min_x_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_min_x_pred(self, *args)


    @property
    def min_x_pred(self):
        return self._v_min_x_pred()

    @min_x_pred.setter
    def min_x_pred(self, value):
      self._v_min_x_pred(value)


    def _v_max_x_pred(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_x_pred(double V)
        Emit::PolynomialParaxialTransform::max_x_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_max_x_pred(self, *args)


    @property
    def max_x_pred(self):
        return self._v_max_x_pred()

    @max_x_pred.setter
    def max_x_pred(self, value):
      self._v_max_x_pred(value)


    def _v_min_y_pred(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_y_pred(double V)
        Emit::PolynomialParaxialTransform::min_y_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_min_y_pred(self, *args)


    @property
    def min_y_pred(self):
        return self._v_min_y_pred()

    @min_y_pred.setter
    def min_y_pred(self, value):
      self._v_min_y_pred(value)


    def _v_max_y_pred(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_y_pred(double V)
        Emit::PolynomialParaxialTransform::max_y_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_max_y_pred(self, *args)


    @property
    def max_y_pred(self):
        return self._v_max_y_pred()

    @max_y_pred.setter
    def max_y_pred(self, value):
      self._v_max_y_pred(value)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _polynomial_paraxial_transform.delete_PolynomialParaxialTransform_3d_5d
    __del__ = lambda self: None
PolynomialParaxialTransform_3d_5d_swigregister = _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d_swigregister
PolynomialParaxialTransform_3d_5d_swigregister(PolynomialParaxialTransform_3d_5d)

class PolynomialParaxialTransform_5d_3d(emit_swig.camera_paraxial.ParaxialTransform):
    """

    A common ParaxialTransform is to just use a polynomial to model the
    data.

    This implements that.

    C++ includes: polynomial_paraxial_transform.h 
    """

    __swig_setmethods__ = {}
    for _s in [emit_swig.camera_paraxial.ParaxialTransform]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolynomialParaxialTransform_5d_3d, name, value)
    __swig_getmethods__ = {}
    for _s in [emit_swig.camera_paraxial.ParaxialTransform]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolynomialParaxialTransform_5d_3d, name)
    __repr__ = _swig_repr

    def __init__(self):
        """

        Emit::PolynomialParaxialTransform< D1, D2 >::PolynomialParaxialTransform()
        Emit::PolynomialParaxialTransform::PolynomialParaxialTransform
        We populate the transform separately, so just have a default
        constructor.

        """
        this = _polynomial_paraxial_transform.new_PolynomialParaxialTransform_5d_3d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def paraxial_to_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::paraxial_to_real(double Paraxial_x, double Paraxial_y, double &Real_x, double &Real_y)
        const
        Emit::PolynomialParaxialTransform::paraxial_to_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d_paraxial_to_real(self, *args)


    def _v_par_to_real(self):
        """

        const blitz::Array< double, 2 > & Emit::PolynomialParaxialTransform< D1, D2 >::par_to_real() const
        Emit::PolynomialParaxialTransform::par_to_real
        Polynomial from paraxial to real.

        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_par_to_real(self)


    @property
    def par_to_real(self):
        return self._v_par_to_real()


    def _v_real_to_par(self):
        """

        const blitz::Array< double, 2 > & Emit::PolynomialParaxialTransform< D1, D2 >::real_to_par() const
        Emit::PolynomialParaxialTransform::real_to_par
        Polynomial from real to paraxial.

        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_real_to_par(self)


    @property
    def real_to_par(self):
        return self._v_real_to_par()


    def _v_min_x_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_x_real(double V)
        Emit::PolynomialParaxialTransform::min_x_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_min_x_real(self, *args)


    @property
    def min_x_real(self):
        return self._v_min_x_real()

    @min_x_real.setter
    def min_x_real(self, value):
      self._v_min_x_real(value)


    def _v_max_x_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_x_real(double V)
        Emit::PolynomialParaxialTransform::max_x_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_max_x_real(self, *args)


    @property
    def max_x_real(self):
        return self._v_max_x_real()

    @max_x_real.setter
    def max_x_real(self, value):
      self._v_max_x_real(value)


    def _v_min_y_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_y_real(double V)
        Emit::PolynomialParaxialTransform::min_y_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_min_y_real(self, *args)


    @property
    def min_y_real(self):
        return self._v_min_y_real()

    @min_y_real.setter
    def min_y_real(self, value):
      self._v_min_y_real(value)


    def _v_max_y_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_y_real(double V)
        Emit::PolynomialParaxialTransform::max_y_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_max_y_real(self, *args)


    @property
    def max_y_real(self):
        return self._v_max_y_real()

    @max_y_real.setter
    def max_y_real(self, value):
      self._v_max_y_real(value)


    def _v_min_x_pred(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_x_pred(double V)
        Emit::PolynomialParaxialTransform::min_x_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_min_x_pred(self, *args)


    @property
    def min_x_pred(self):
        return self._v_min_x_pred()

    @min_x_pred.setter
    def min_x_pred(self, value):
      self._v_min_x_pred(value)


    def _v_max_x_pred(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_x_pred(double V)
        Emit::PolynomialParaxialTransform::max_x_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_max_x_pred(self, *args)


    @property
    def max_x_pred(self):
        return self._v_max_x_pred()

    @max_x_pred.setter
    def max_x_pred(self, value):
      self._v_max_x_pred(value)


    def _v_min_y_pred(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_y_pred(double V)
        Emit::PolynomialParaxialTransform::min_y_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_min_y_pred(self, *args)


    @property
    def min_y_pred(self):
        return self._v_min_y_pred()

    @min_y_pred.setter
    def min_y_pred(self, value):
      self._v_min_y_pred(value)


    def _v_max_y_pred(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_y_pred(double V)
        Emit::PolynomialParaxialTransform::max_y_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_max_y_pred(self, *args)


    @property
    def max_y_pred(self):
        return self._v_max_y_pred()

    @max_y_pred.setter
    def max_y_pred(self, value):
      self._v_max_y_pred(value)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _polynomial_paraxial_transform.delete_PolynomialParaxialTransform_5d_3d
    __del__ = lambda self: None
PolynomialParaxialTransform_5d_3d_swigregister = _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d_swigregister
PolynomialParaxialTransform_5d_3d_swigregister(PolynomialParaxialTransform_5d_3d)

class PolynomialParaxialTransform_5d_5d(emit_swig.camera_paraxial.ParaxialTransform):
    """

    A common ParaxialTransform is to just use a polynomial to model the
    data.

    This implements that.

    C++ includes: polynomial_paraxial_transform.h 
    """

    __swig_setmethods__ = {}
    for _s in [emit_swig.camera_paraxial.ParaxialTransform]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolynomialParaxialTransform_5d_5d, name, value)
    __swig_getmethods__ = {}
    for _s in [emit_swig.camera_paraxial.ParaxialTransform]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolynomialParaxialTransform_5d_5d, name)
    __repr__ = _swig_repr

    def __init__(self):
        """

        Emit::PolynomialParaxialTransform< D1, D2 >::PolynomialParaxialTransform()
        Emit::PolynomialParaxialTransform::PolynomialParaxialTransform
        We populate the transform separately, so just have a default
        constructor.

        """
        this = _polynomial_paraxial_transform.new_PolynomialParaxialTransform_5d_5d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def paraxial_to_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::paraxial_to_real(double Paraxial_x, double Paraxial_y, double &Real_x, double &Real_y)
        const
        Emit::PolynomialParaxialTransform::paraxial_to_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d_paraxial_to_real(self, *args)


    def _v_par_to_real(self):
        """

        const blitz::Array< double, 2 > & Emit::PolynomialParaxialTransform< D1, D2 >::par_to_real() const
        Emit::PolynomialParaxialTransform::par_to_real
        Polynomial from paraxial to real.

        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_par_to_real(self)


    @property
    def par_to_real(self):
        return self._v_par_to_real()


    def _v_real_to_par(self):
        """

        const blitz::Array< double, 2 > & Emit::PolynomialParaxialTransform< D1, D2 >::real_to_par() const
        Emit::PolynomialParaxialTransform::real_to_par
        Polynomial from real to paraxial.

        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_real_to_par(self)


    @property
    def real_to_par(self):
        return self._v_real_to_par()


    def _v_min_x_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_x_real(double V)
        Emit::PolynomialParaxialTransform::min_x_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_min_x_real(self, *args)


    @property
    def min_x_real(self):
        return self._v_min_x_real()

    @min_x_real.setter
    def min_x_real(self, value):
      self._v_min_x_real(value)


    def _v_max_x_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_x_real(double V)
        Emit::PolynomialParaxialTransform::max_x_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_max_x_real(self, *args)


    @property
    def max_x_real(self):
        return self._v_max_x_real()

    @max_x_real.setter
    def max_x_real(self, value):
      self._v_max_x_real(value)


    def _v_min_y_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_y_real(double V)
        Emit::PolynomialParaxialTransform::min_y_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_min_y_real(self, *args)


    @property
    def min_y_real(self):
        return self._v_min_y_real()

    @min_y_real.setter
    def min_y_real(self, value):
      self._v_min_y_real(value)


    def _v_max_y_real(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_y_real(double V)
        Emit::PolynomialParaxialTransform::max_y_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_max_y_real(self, *args)


    @property
    def max_y_real(self):
        return self._v_max_y_real()

    @max_y_real.setter
    def max_y_real(self, value):
      self._v_max_y_real(value)


    def _v_min_x_pred(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_x_pred(double V)
        Emit::PolynomialParaxialTransform::min_x_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_min_x_pred(self, *args)


    @property
    def min_x_pred(self):
        return self._v_min_x_pred()

    @min_x_pred.setter
    def min_x_pred(self, value):
      self._v_min_x_pred(value)


    def _v_max_x_pred(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_x_pred(double V)
        Emit::PolynomialParaxialTransform::max_x_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_max_x_pred(self, *args)


    @property
    def max_x_pred(self):
        return self._v_max_x_pred()

    @max_x_pred.setter
    def max_x_pred(self, value):
      self._v_max_x_pred(value)


    def _v_min_y_pred(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_y_pred(double V)
        Emit::PolynomialParaxialTransform::min_y_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_min_y_pred(self, *args)


    @property
    def min_y_pred(self):
        return self._v_min_y_pred()

    @min_y_pred.setter
    def min_y_pred(self, value):
      self._v_min_y_pred(value)


    def _v_max_y_pred(self, *args):
        """

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_y_pred(double V)
        Emit::PolynomialParaxialTransform::max_y_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_max_y_pred(self, *args)


    @property
    def max_y_pred(self):
        return self._v_max_y_pred()

    @max_y_pred.setter
    def max_y_pred(self, value):
      self._v_max_y_pred(value)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _polynomial_paraxial_transform.delete_PolynomialParaxialTransform_5d_5d
    __del__ = lambda self: None
PolynomialParaxialTransform_5d_5d_swigregister = _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d_swigregister
PolynomialParaxialTransform_5d_5d_swigregister(PolynomialParaxialTransform_5d_5d)


__all__ = ["PolynomialParaxialTransform_3d_3d","PolynomialParaxialTransform_3d_5d","PolynomialParaxialTransform_5d_3d","PolynomialParaxialTransform_5d_5d"]

# This file is compatible with both classic and new-style classes.


