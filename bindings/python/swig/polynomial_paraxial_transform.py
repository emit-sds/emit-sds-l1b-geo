# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _polynomial_paraxial_transform

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _polynomial_paraxial_transform.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _polynomial_paraxial_transform.delete_SwigPyIterator

    def value(self):
        return _polynomial_paraxial_transform.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _polynomial_paraxial_transform.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _polynomial_paraxial_transform.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _polynomial_paraxial_transform.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _polynomial_paraxial_transform.SwigPyIterator_equal(self, x)

    def copy(self):
        return _polynomial_paraxial_transform.SwigPyIterator_copy(self)

    def next(self):
        return _polynomial_paraxial_transform.SwigPyIterator_next(self)

    def __next__(self):
        return _polynomial_paraxial_transform.SwigPyIterator___next__(self)

    def previous(self):
        return _polynomial_paraxial_transform.SwigPyIterator_previous(self)

    def advance(self, n):
        return _polynomial_paraxial_transform.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _polynomial_paraxial_transform.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _polynomial_paraxial_transform.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _polynomial_paraxial_transform.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _polynomial_paraxial_transform.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _polynomial_paraxial_transform.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _polynomial_paraxial_transform.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _polynomial_paraxial_transform:
_polynomial_paraxial_transform.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _polynomial_paraxial_transform.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import emit_swig.camera_paraxial
import geocal_swig.generic_object
import geocal_swig.quaternion_camera
import geocal_swig.observer
import geocal_swig.camera
import geocal_swig.with_parameter
class PolynomialParaxialTransform_3d_3d(emit_swig.camera_paraxial.ParaxialTransform):
    r"""

    A common ParaxialTransform is to just use a polynomial to model the
    data.

    This implements that.

    C++ includes: polynomial_paraxial_transform.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""

        Emit::PolynomialParaxialTransform< D1, D2 >::PolynomialParaxialTransform()
        Emit::PolynomialParaxialTransform::PolynomialParaxialTransform
        We populate the transform separately, so just have a default
        constructor.

        """
        _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d_swiginit(self, _polynomial_paraxial_transform.new_PolynomialParaxialTransform_3d_3d())

    def paraxial_to_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::paraxial_to_real(double Paraxial_x, double Paraxial_y, double &Real_x, double &Real_y)
        const
        Emit::PolynomialParaxialTransform::paraxial_to_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d_paraxial_to_real(self, *args)

    def _v_par_to_real(self):
        r"""

        const blitz::Array< double, 2 > & Emit::PolynomialParaxialTransform< D1, D2 >::par_to_real() const
        Emit::PolynomialParaxialTransform::par_to_real
        Polynomial from paraxial to real.

        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_par_to_real(self)

    @property
    def par_to_real(self):
        return self._v_par_to_real()


    def _v_real_to_par(self):
        r"""

        const blitz::Array< double, 2 > & Emit::PolynomialParaxialTransform< D1, D2 >::real_to_par() const
        Emit::PolynomialParaxialTransform::real_to_par
        Polynomial from real to paraxial.

        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_real_to_par(self)

    @property
    def real_to_par(self):
        return self._v_real_to_par()


    def _v_min_x_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_x_real(double V)
        Emit::PolynomialParaxialTransform::min_x_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_min_x_real(self, *args)

    @property
    def min_x_real(self):
        return self._v_min_x_real()

    @min_x_real.setter
    def min_x_real(self, value):
      self._v_min_x_real(value)


    def _v_max_x_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_x_real(double V)
        Emit::PolynomialParaxialTransform::max_x_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_max_x_real(self, *args)

    @property
    def max_x_real(self):
        return self._v_max_x_real()

    @max_x_real.setter
    def max_x_real(self, value):
      self._v_max_x_real(value)


    def _v_min_y_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_y_real(double V)
        Emit::PolynomialParaxialTransform::min_y_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_min_y_real(self, *args)

    @property
    def min_y_real(self):
        return self._v_min_y_real()

    @min_y_real.setter
    def min_y_real(self, value):
      self._v_min_y_real(value)


    def _v_max_y_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_y_real(double V)
        Emit::PolynomialParaxialTransform::max_y_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_max_y_real(self, *args)

    @property
    def max_y_real(self):
        return self._v_max_y_real()

    @max_y_real.setter
    def max_y_real(self, value):
      self._v_max_y_real(value)


    def _v_min_x_pred(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_x_pred(double V)
        Emit::PolynomialParaxialTransform::min_x_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_min_x_pred(self, *args)

    @property
    def min_x_pred(self):
        return self._v_min_x_pred()

    @min_x_pred.setter
    def min_x_pred(self, value):
      self._v_min_x_pred(value)


    def _v_max_x_pred(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_x_pred(double V)
        Emit::PolynomialParaxialTransform::max_x_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_max_x_pred(self, *args)

    @property
    def max_x_pred(self):
        return self._v_max_x_pred()

    @max_x_pred.setter
    def max_x_pred(self, value):
      self._v_max_x_pred(value)


    def _v_min_y_pred(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_y_pred(double V)
        Emit::PolynomialParaxialTransform::min_y_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_min_y_pred(self, *args)

    @property
    def min_y_pred(self):
        return self._v_min_y_pred()

    @min_y_pred.setter
    def min_y_pred(self, value):
      self._v_min_y_pred(value)


    def _v_max_y_pred(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_y_pred(double V)
        Emit::PolynomialParaxialTransform::max_y_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d__v_max_y_pred(self, *args)

    @property
    def max_y_pred(self):
        return self._v_max_y_pred()

    @max_y_pred.setter
    def max_y_pred(self, value):
      self._v_max_y_pred(value)


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _polynomial_paraxial_transform.delete_PolynomialParaxialTransform_3d_3d

# Register PolynomialParaxialTransform_3d_3d in _polynomial_paraxial_transform:
_polynomial_paraxial_transform.PolynomialParaxialTransform_3d_3d_swigregister(PolynomialParaxialTransform_3d_3d)
class PolynomialParaxialTransform_3d_5d(emit_swig.camera_paraxial.ParaxialTransform):
    r"""

    A common ParaxialTransform is to just use a polynomial to model the
    data.

    This implements that.

    C++ includes: polynomial_paraxial_transform.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""

        Emit::PolynomialParaxialTransform< D1, D2 >::PolynomialParaxialTransform()
        Emit::PolynomialParaxialTransform::PolynomialParaxialTransform
        We populate the transform separately, so just have a default
        constructor.

        """
        _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d_swiginit(self, _polynomial_paraxial_transform.new_PolynomialParaxialTransform_3d_5d())

    def paraxial_to_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::paraxial_to_real(double Paraxial_x, double Paraxial_y, double &Real_x, double &Real_y)
        const
        Emit::PolynomialParaxialTransform::paraxial_to_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d_paraxial_to_real(self, *args)

    def _v_par_to_real(self):
        r"""

        const blitz::Array< double, 2 > & Emit::PolynomialParaxialTransform< D1, D2 >::par_to_real() const
        Emit::PolynomialParaxialTransform::par_to_real
        Polynomial from paraxial to real.

        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_par_to_real(self)

    @property
    def par_to_real(self):
        return self._v_par_to_real()


    def _v_real_to_par(self):
        r"""

        const blitz::Array< double, 2 > & Emit::PolynomialParaxialTransform< D1, D2 >::real_to_par() const
        Emit::PolynomialParaxialTransform::real_to_par
        Polynomial from real to paraxial.

        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_real_to_par(self)

    @property
    def real_to_par(self):
        return self._v_real_to_par()


    def _v_min_x_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_x_real(double V)
        Emit::PolynomialParaxialTransform::min_x_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_min_x_real(self, *args)

    @property
    def min_x_real(self):
        return self._v_min_x_real()

    @min_x_real.setter
    def min_x_real(self, value):
      self._v_min_x_real(value)


    def _v_max_x_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_x_real(double V)
        Emit::PolynomialParaxialTransform::max_x_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_max_x_real(self, *args)

    @property
    def max_x_real(self):
        return self._v_max_x_real()

    @max_x_real.setter
    def max_x_real(self, value):
      self._v_max_x_real(value)


    def _v_min_y_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_y_real(double V)
        Emit::PolynomialParaxialTransform::min_y_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_min_y_real(self, *args)

    @property
    def min_y_real(self):
        return self._v_min_y_real()

    @min_y_real.setter
    def min_y_real(self, value):
      self._v_min_y_real(value)


    def _v_max_y_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_y_real(double V)
        Emit::PolynomialParaxialTransform::max_y_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_max_y_real(self, *args)

    @property
    def max_y_real(self):
        return self._v_max_y_real()

    @max_y_real.setter
    def max_y_real(self, value):
      self._v_max_y_real(value)


    def _v_min_x_pred(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_x_pred(double V)
        Emit::PolynomialParaxialTransform::min_x_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_min_x_pred(self, *args)

    @property
    def min_x_pred(self):
        return self._v_min_x_pred()

    @min_x_pred.setter
    def min_x_pred(self, value):
      self._v_min_x_pred(value)


    def _v_max_x_pred(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_x_pred(double V)
        Emit::PolynomialParaxialTransform::max_x_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_max_x_pred(self, *args)

    @property
    def max_x_pred(self):
        return self._v_max_x_pred()

    @max_x_pred.setter
    def max_x_pred(self, value):
      self._v_max_x_pred(value)


    def _v_min_y_pred(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_y_pred(double V)
        Emit::PolynomialParaxialTransform::min_y_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_min_y_pred(self, *args)

    @property
    def min_y_pred(self):
        return self._v_min_y_pred()

    @min_y_pred.setter
    def min_y_pred(self, value):
      self._v_min_y_pred(value)


    def _v_max_y_pred(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_y_pred(double V)
        Emit::PolynomialParaxialTransform::max_y_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d__v_max_y_pred(self, *args)

    @property
    def max_y_pred(self):
        return self._v_max_y_pred()

    @max_y_pred.setter
    def max_y_pred(self, value):
      self._v_max_y_pred(value)


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _polynomial_paraxial_transform.delete_PolynomialParaxialTransform_3d_5d

# Register PolynomialParaxialTransform_3d_5d in _polynomial_paraxial_transform:
_polynomial_paraxial_transform.PolynomialParaxialTransform_3d_5d_swigregister(PolynomialParaxialTransform_3d_5d)
class PolynomialParaxialTransform_5d_3d(emit_swig.camera_paraxial.ParaxialTransform):
    r"""

    A common ParaxialTransform is to just use a polynomial to model the
    data.

    This implements that.

    C++ includes: polynomial_paraxial_transform.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""

        Emit::PolynomialParaxialTransform< D1, D2 >::PolynomialParaxialTransform()
        Emit::PolynomialParaxialTransform::PolynomialParaxialTransform
        We populate the transform separately, so just have a default
        constructor.

        """
        _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d_swiginit(self, _polynomial_paraxial_transform.new_PolynomialParaxialTransform_5d_3d())

    def paraxial_to_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::paraxial_to_real(double Paraxial_x, double Paraxial_y, double &Real_x, double &Real_y)
        const
        Emit::PolynomialParaxialTransform::paraxial_to_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d_paraxial_to_real(self, *args)

    def _v_par_to_real(self):
        r"""

        const blitz::Array< double, 2 > & Emit::PolynomialParaxialTransform< D1, D2 >::par_to_real() const
        Emit::PolynomialParaxialTransform::par_to_real
        Polynomial from paraxial to real.

        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_par_to_real(self)

    @property
    def par_to_real(self):
        return self._v_par_to_real()


    def _v_real_to_par(self):
        r"""

        const blitz::Array< double, 2 > & Emit::PolynomialParaxialTransform< D1, D2 >::real_to_par() const
        Emit::PolynomialParaxialTransform::real_to_par
        Polynomial from real to paraxial.

        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_real_to_par(self)

    @property
    def real_to_par(self):
        return self._v_real_to_par()


    def _v_min_x_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_x_real(double V)
        Emit::PolynomialParaxialTransform::min_x_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_min_x_real(self, *args)

    @property
    def min_x_real(self):
        return self._v_min_x_real()

    @min_x_real.setter
    def min_x_real(self, value):
      self._v_min_x_real(value)


    def _v_max_x_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_x_real(double V)
        Emit::PolynomialParaxialTransform::max_x_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_max_x_real(self, *args)

    @property
    def max_x_real(self):
        return self._v_max_x_real()

    @max_x_real.setter
    def max_x_real(self, value):
      self._v_max_x_real(value)


    def _v_min_y_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_y_real(double V)
        Emit::PolynomialParaxialTransform::min_y_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_min_y_real(self, *args)

    @property
    def min_y_real(self):
        return self._v_min_y_real()

    @min_y_real.setter
    def min_y_real(self, value):
      self._v_min_y_real(value)


    def _v_max_y_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_y_real(double V)
        Emit::PolynomialParaxialTransform::max_y_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_max_y_real(self, *args)

    @property
    def max_y_real(self):
        return self._v_max_y_real()

    @max_y_real.setter
    def max_y_real(self, value):
      self._v_max_y_real(value)


    def _v_min_x_pred(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_x_pred(double V)
        Emit::PolynomialParaxialTransform::min_x_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_min_x_pred(self, *args)

    @property
    def min_x_pred(self):
        return self._v_min_x_pred()

    @min_x_pred.setter
    def min_x_pred(self, value):
      self._v_min_x_pred(value)


    def _v_max_x_pred(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_x_pred(double V)
        Emit::PolynomialParaxialTransform::max_x_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_max_x_pred(self, *args)

    @property
    def max_x_pred(self):
        return self._v_max_x_pred()

    @max_x_pred.setter
    def max_x_pred(self, value):
      self._v_max_x_pred(value)


    def _v_min_y_pred(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_y_pred(double V)
        Emit::PolynomialParaxialTransform::min_y_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_min_y_pred(self, *args)

    @property
    def min_y_pred(self):
        return self._v_min_y_pred()

    @min_y_pred.setter
    def min_y_pred(self, value):
      self._v_min_y_pred(value)


    def _v_max_y_pred(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_y_pred(double V)
        Emit::PolynomialParaxialTransform::max_y_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d__v_max_y_pred(self, *args)

    @property
    def max_y_pred(self):
        return self._v_max_y_pred()

    @max_y_pred.setter
    def max_y_pred(self, value):
      self._v_max_y_pred(value)


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _polynomial_paraxial_transform.delete_PolynomialParaxialTransform_5d_3d

# Register PolynomialParaxialTransform_5d_3d in _polynomial_paraxial_transform:
_polynomial_paraxial_transform.PolynomialParaxialTransform_5d_3d_swigregister(PolynomialParaxialTransform_5d_3d)
class PolynomialParaxialTransform_5d_5d(emit_swig.camera_paraxial.ParaxialTransform):
    r"""

    A common ParaxialTransform is to just use a polynomial to model the
    data.

    This implements that.

    C++ includes: polynomial_paraxial_transform.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""

        Emit::PolynomialParaxialTransform< D1, D2 >::PolynomialParaxialTransform()
        Emit::PolynomialParaxialTransform::PolynomialParaxialTransform
        We populate the transform separately, so just have a default
        constructor.

        """
        _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d_swiginit(self, _polynomial_paraxial_transform.new_PolynomialParaxialTransform_5d_5d())

    def paraxial_to_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::paraxial_to_real(double Paraxial_x, double Paraxial_y, double &Real_x, double &Real_y)
        const
        Emit::PolynomialParaxialTransform::paraxial_to_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d_paraxial_to_real(self, *args)

    def _v_par_to_real(self):
        r"""

        const blitz::Array< double, 2 > & Emit::PolynomialParaxialTransform< D1, D2 >::par_to_real() const
        Emit::PolynomialParaxialTransform::par_to_real
        Polynomial from paraxial to real.

        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_par_to_real(self)

    @property
    def par_to_real(self):
        return self._v_par_to_real()


    def _v_real_to_par(self):
        r"""

        const blitz::Array< double, 2 > & Emit::PolynomialParaxialTransform< D1, D2 >::real_to_par() const
        Emit::PolynomialParaxialTransform::real_to_par
        Polynomial from real to paraxial.

        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_real_to_par(self)

    @property
    def real_to_par(self):
        return self._v_real_to_par()


    def _v_min_x_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_x_real(double V)
        Emit::PolynomialParaxialTransform::min_x_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_min_x_real(self, *args)

    @property
    def min_x_real(self):
        return self._v_min_x_real()

    @min_x_real.setter
    def min_x_real(self, value):
      self._v_min_x_real(value)


    def _v_max_x_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_x_real(double V)
        Emit::PolynomialParaxialTransform::max_x_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_max_x_real(self, *args)

    @property
    def max_x_real(self):
        return self._v_max_x_real()

    @max_x_real.setter
    def max_x_real(self, value):
      self._v_max_x_real(value)


    def _v_min_y_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_y_real(double V)
        Emit::PolynomialParaxialTransform::min_y_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_min_y_real(self, *args)

    @property
    def min_y_real(self):
        return self._v_min_y_real()

    @min_y_real.setter
    def min_y_real(self, value):
      self._v_min_y_real(value)


    def _v_max_y_real(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_y_real(double V)
        Emit::PolynomialParaxialTransform::max_y_real
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_max_y_real(self, *args)

    @property
    def max_y_real(self):
        return self._v_max_y_real()

    @max_y_real.setter
    def max_y_real(self, value):
      self._v_max_y_real(value)


    def _v_min_x_pred(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_x_pred(double V)
        Emit::PolynomialParaxialTransform::min_x_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_min_x_pred(self, *args)

    @property
    def min_x_pred(self):
        return self._v_min_x_pred()

    @min_x_pred.setter
    def min_x_pred(self, value):
      self._v_min_x_pred(value)


    def _v_max_x_pred(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_x_pred(double V)
        Emit::PolynomialParaxialTransform::max_x_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_max_x_pred(self, *args)

    @property
    def max_x_pred(self):
        return self._v_max_x_pred()

    @max_x_pred.setter
    def max_x_pred(self, value):
      self._v_max_x_pred(value)


    def _v_min_y_pred(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::min_y_pred(double V)
        Emit::PolynomialParaxialTransform::min_y_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_min_y_pred(self, *args)

    @property
    def min_y_pred(self):
        return self._v_min_y_pred()

    @min_y_pred.setter
    def min_y_pred(self, value):
      self._v_min_y_pred(value)


    def _v_max_y_pred(self, *args):
        r"""

        void Emit::PolynomialParaxialTransform< D1, D2 >::max_y_pred(double V)
        Emit::PolynomialParaxialTransform::max_y_pred
        """
        return _polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d__v_max_y_pred(self, *args)

    @property
    def max_y_pred(self):
        return self._v_max_y_pred()

    @max_y_pred.setter
    def max_y_pred(self, value):
      self._v_max_y_pred(value)


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _polynomial_paraxial_transform.delete_PolynomialParaxialTransform_5d_5d

# Register PolynomialParaxialTransform_5d_5d in _polynomial_paraxial_transform:
_polynomial_paraxial_transform.PolynomialParaxialTransform_5d_5d_swigregister(PolynomialParaxialTransform_5d_5d)

__all__ = ["PolynomialParaxialTransform_3d_3d","PolynomialParaxialTransform_3d_5d","PolynomialParaxialTransform_5d_3d","PolynomialParaxialTransform_5d_5d"]


